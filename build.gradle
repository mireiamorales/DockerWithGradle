/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3.1/userguide/java_library_plugin.html
 */
 
 
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.12.0"
    }
}
plugins {
    id 'com.palantir.docker' version '0.12.0'
    id 'com.palantir.docker-run' version '0.12.0'
}
apply plugin: 'com.palantir.docker'
apply plugin: 'application'

 

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

mainClassName = 'com.javacodegeeks.examples.HelloWorld'

jar {
    manifest {
        attributes(
            'Main-Class': mainClassName
        )
    }
}

docker {
    name 'com.javacodegeeks.examples/docker-hello-world:1'
    tags 'latest'
    dockerfile 'src/main/docker/Dockerfile'
    dependsOn tasks.jar
}

dockerRun {
    name 'docker-hello-world-container'
    image 'com.javacodegeeks.examples/docker-hello-world:1'
    command 'java', '-Djava.security.egd=file:/dev/./urandom', '-jar', 'app.jar'
}

